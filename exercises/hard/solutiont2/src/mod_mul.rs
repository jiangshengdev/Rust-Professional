/// 计算 (a * b) % m，防止中间乘法溢出
///
/// # 参数
/// a - 被乘数，类型为 u128
/// b - 乘数，类型为 u128
/// m - 模数，类型为 u128
///
/// # 返回值
/// 返回 (a * b) % m 的结果
pub(crate) fn mod_mul(mut a: u128, mut b: u128, m: u128) -> u128 {
    // 初始化结果，用于累加乘法结果
    let mut res = 0;
    // 将 a 限制在模 m 范围内
    a %= m;
    // 当 b 大于 0 时逐位检查
    while b > 0 {
        // 若 b 的最低位为 1，则将 a 加入结果
        if b & 1 == 1 {
            res = (res + a) % m;
        }
        // 将 a 叠加自身，并取模防止溢出
        a = (a + a) % m;
        // 将 b 右移一位
        b >>= 1;
    }
    // 返回最终的乘法模结果
    res
}
